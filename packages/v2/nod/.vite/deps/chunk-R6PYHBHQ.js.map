{
  "version": 3,
  "sources": ["../../../../../node_modules/crypto-es/lib/enc-base64.js"],
  "sourcesContent": ["import {\n  WordArray,\n} from './core.js';\n\nexport const parseLoop = (base64Str, base64StrLength, reverseMap) => {\n  const words = [];\n  let nBytes = 0;\n  for (let i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      const bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n      const bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n      const bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n      nBytes += 1;\n    }\n  }\n  return WordArray.create(words, nBytes);\n};\n\n/**\n * Base64 encoding strategy.\n */\nexport const Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n    const map = this._map;\n\n    // Clamp excess bits\n    wordArray.clamp();\n\n    // Convert\n    const base64Chars = [];\n    for (let i = 0; i < sigBytes; i += 3) {\n      const byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      const byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n      const byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n      const triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n      for (let j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j += 1) {\n        base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n      }\n    }\n\n    // Add padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse(base64Str) {\n    // Shortcuts\n    let base64StrLength = base64Str.length;\n    const map = this._map;\n    let reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n      for (let j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    }\n\n    // Ignore padding\n    const paddingChar = map.charAt(64);\n    if (paddingChar) {\n      const paddingIndex = base64Str.indexOf(paddingChar);\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    }\n\n    // Convert\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n};\n"],
  "mappings": ";;;;;AAIO,IAAM,YAAY,CAAC,WAAW,iBAAiB,eAAe;AACnE,QAAM,QAAQ,CAAC;AACf,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK,GAAG;AAC3C,QAAI,IAAI,GAAG;AACT,YAAM,QAAQ,WAAW,UAAU,WAAW,IAAI,CAAC,MAAQ,IAAI,IAAK;AACpE,YAAM,QAAQ,WAAW,UAAU,WAAW,CAAC,OAAQ,IAAK,IAAI,IAAK;AACrE,YAAM,eAAe,QAAQ;AAC7B,YAAM,WAAW,MAAM,gBAAiB,KAAM,SAAS,IAAK;AAC5D,gBAAU;AAAA,IACZ;AAAA,EACF;AACA,SAAO,UAAU,OAAO,OAAO,MAAM;AACvC;AAKO,IAAM,SAAS;AAAA,EAcpB,UAAU,WAAW;AAEnB,UAAM,EAAE,OAAO,SAAS,IAAI;AAC5B,UAAM,MAAM,KAAK;AAGjB,cAAU,MAAM;AAGhB,UAAM,cAAc,CAAC;AACrB,aAAS,IAAI,GAAG,IAAI,UAAU,KAAK,GAAG;AACpC,YAAM,QAAS,MAAM,MAAM,OAAQ,KAAM,IAAI,IAAK,IAAM;AACxD,YAAM,QAAS,MAAO,IAAI,MAAO,OAAQ,MAAO,IAAI,KAAK,IAAK,IAAM;AACpE,YAAM,QAAS,MAAO,IAAI,MAAO,OAAQ,MAAO,IAAI,KAAK,IAAK,IAAM;AAEpE,YAAM,UAAW,SAAS,KAAO,SAAS,IAAK;AAE/C,eAAS,IAAI,GAAI,IAAI,KAAO,IAAI,IAAI,OAAO,UAAW,KAAK,GAAG;AAC5D,oBAAY,KAAK,IAAI,OAAQ,YAAa,KAAK,IAAI,KAAO,EAAI,CAAC;AAAA,MACjE;AAAA,IACF;AAGA,UAAM,cAAc,IAAI,OAAO,EAAE;AACjC,QAAI,aAAa;AACf,aAAO,YAAY,SAAS,GAAG;AAC7B,oBAAY,KAAK,WAAW;AAAA,MAC9B;AAAA,IACF;AAEA,WAAO,YAAY,KAAK,EAAE;AAAA,EAC5B;AAAA,EAeA,MAAM,WAAW;AAEf,QAAI,kBAAkB,UAAU;AAChC,UAAM,MAAM,KAAK;AACjB,QAAI,aAAa,KAAK;AAEtB,QAAI,CAAC,YAAY;AACf,WAAK,cAAc,CAAC;AACpB,mBAAa,KAAK;AAClB,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,mBAAW,IAAI,WAAW,CAAC,KAAK;AAAA,MAClC;AAAA,IACF;AAGA,UAAM,cAAc,IAAI,OAAO,EAAE;AACjC,QAAI,aAAa;AACf,YAAM,eAAe,UAAU,QAAQ,WAAW;AAClD,UAAI,iBAAiB,IAAI;AACvB,0BAAkB;AAAA,MACpB;AAAA,IACF;AAGA,WAAO,UAAU,WAAW,iBAAiB,UAAU;AAAA,EACzD;AAAA,EAEA,MAAM;AACR;",
  "names": []
}
