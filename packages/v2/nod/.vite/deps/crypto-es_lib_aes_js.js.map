{
  "version": 3,
  "sources": ["../../../../../node_modules/crypto-es/lib/aes.js"],
  "sourcesContent": ["import {\n  BlockCipher,\n} from './cipher-core.js';\n\n// Lookup tables\nconst _SBOX = [];\nconst INV_SBOX = [];\nconst _SUB_MIX_0 = [];\nconst _SUB_MIX_1 = [];\nconst _SUB_MIX_2 = [];\nconst _SUB_MIX_3 = [];\nconst INV_SUB_MIX_0 = [];\nconst INV_SUB_MIX_1 = [];\nconst INV_SUB_MIX_2 = [];\nconst INV_SUB_MIX_3 = [];\n\n// Compute lookup tables\n\n// Compute double table\nconst d = [];\nfor (let i = 0; i < 256; i += 1) {\n  if (i < 128) {\n    d[i] = i << 1;\n  } else {\n    d[i] = (i << 1) ^ 0x11b;\n  }\n}\n\n// Walk GF(2^8)\nlet x = 0;\nlet xi = 0;\nfor (let i = 0; i < 256; i += 1) {\n  // Compute sbox\n  let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n  sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n  _SBOX[x] = sx;\n  INV_SBOX[sx] = x;\n\n  // Compute multiplication\n  const x2 = d[x];\n  const x4 = d[x2];\n  const x8 = d[x4];\n\n  // Compute sub bytes, mix columns tables\n  let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n  _SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n  _SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n  _SUB_MIX_2[x] = (t << 8) | (t >>> 24);\n  _SUB_MIX_3[x] = t;\n\n  // Compute inv sub bytes, inv mix columns tables\n  t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n  INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n  INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n  INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);\n  INV_SUB_MIX_3[sx] = t;\n\n  // Compute next counter\n  if (!x) {\n    xi = 1;\n    x = xi;\n  } else {\n    x = x2 ^ d[d[d[x8 ^ x2]]];\n    xi ^= d[d[xi]];\n  }\n}\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n/**\n * AES block cipher algorithm.\n */\nexport class AESAlgo extends BlockCipher {\n  _doReset() {\n    let t;\n\n    // Skip reset of nRounds has been set before and key did not change\n    if (this._nRounds && this._keyPriorReset === this._key) {\n      return;\n    }\n\n    // Shortcuts\n    this._keyPriorReset = this._key;\n    const key = this._keyPriorReset;\n    const keyWords = key.words;\n    const keySize = key.sigBytes / 4;\n\n    // Compute number of rounds\n    this._nRounds = keySize + 6;\n    const nRounds = this._nRounds;\n\n    // Compute number of key schedule rows\n    const ksRows = (nRounds + 1) * 4;\n\n    // Compute key schedule\n    this._keySchedule = [];\n    const keySchedule = this._keySchedule;\n    for (let ksRow = 0; ksRow < ksRows; ksRow += 1) {\n      if (ksRow < keySize) {\n        keySchedule[ksRow] = keyWords[ksRow];\n      } else {\n        t = keySchedule[ksRow - 1];\n\n        if (!(ksRow % keySize)) {\n          // Rot word\n          t = (t << 8) | (t >>> 24);\n\n          // Sub word\n          t = (_SBOX[t >>> 24] << 24)\n            | (_SBOX[(t >>> 16) & 0xff] << 16)\n            | (_SBOX[(t >>> 8) & 0xff] << 8)\n            | _SBOX[t & 0xff];\n\n          // Mix Rcon\n          t ^= RCON[(ksRow / keySize) | 0] << 24;\n        } else if (keySize > 6 && ksRow % keySize === 4) {\n          // Sub word\n          t = (_SBOX[t >>> 24] << 24)\n            | (_SBOX[(t >>> 16) & 0xff] << 16)\n            | (_SBOX[(t >>> 8) & 0xff] << 8)\n            | _SBOX[t & 0xff];\n        }\n\n        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n      }\n    }\n\n    // Compute inv key schedule\n    this._invKeySchedule = [];\n    const invKeySchedule = this._invKeySchedule;\n    for (let invKsRow = 0; invKsRow < ksRows; invKsRow += 1) {\n      const ksRow = ksRows - invKsRow;\n\n      if (invKsRow % 4) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = INV_SUB_MIX_0[_SBOX[t >>> 24]]\n          ^ INV_SUB_MIX_1[_SBOX[(t >>> 16) & 0xff]]\n          ^ INV_SUB_MIX_2[_SBOX[(t >>> 8) & 0xff]]\n          ^ INV_SUB_MIX_3[_SBOX[t & 0xff]];\n      }\n    }\n  }\n\n  encryptBlock(M, offset) {\n    this._doCryptBlock(\n      M, offset, this._keySchedule, _SUB_MIX_0, _SUB_MIX_1, _SUB_MIX_2, _SUB_MIX_3, _SBOX,\n    );\n  }\n\n  decryptBlock(M, offset) {\n    const _M = M;\n\n    // Swap 2nd and 4th rows\n    let t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n\n    this._doCryptBlock(\n      _M,\n      offset,\n      this._invKeySchedule,\n      INV_SUB_MIX_0,\n      INV_SUB_MIX_1,\n      INV_SUB_MIX_2,\n      INV_SUB_MIX_3,\n      INV_SBOX,\n    );\n\n    // Inv swap 2nd and 4th rows\n    t = _M[offset + 1];\n    _M[offset + 1] = _M[offset + 3];\n    _M[offset + 3] = t;\n  }\n\n  _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n    const _M = M;\n\n    // Shortcut\n    const nRounds = this._nRounds;\n\n    // Get input, add round key\n    let s0 = _M[offset] ^ keySchedule[0];\n    let s1 = _M[offset + 1] ^ keySchedule[1];\n    let s2 = _M[offset + 2] ^ keySchedule[2];\n    let s3 = _M[offset + 3] ^ keySchedule[3];\n\n    // Key schedule row counter\n    let ksRow = 4;\n\n    // Rounds\n    for (let round = 1; round < nRounds; round += 1) {\n      // Shift rows, sub bytes, mix columns, add round key\n      const t0 = SUB_MIX_0[s0 >>> 24]\n        ^ SUB_MIX_1[(s1 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s2 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s3 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t1 = SUB_MIX_0[s1 >>> 24]\n        ^ SUB_MIX_1[(s2 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s3 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s0 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t2 = SUB_MIX_0[s2 >>> 24]\n        ^ SUB_MIX_1[(s3 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s0 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s1 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n      const t3 = SUB_MIX_0[s3 >>> 24]\n        ^ SUB_MIX_1[(s0 >>> 16) & 0xff]\n        ^ SUB_MIX_2[(s1 >>> 8) & 0xff]\n        ^ SUB_MIX_3[s2 & 0xff]\n        ^ keySchedule[ksRow];\n      ksRow += 1;\n\n      // Update state\n      s0 = t0;\n      s1 = t1;\n      s2 = t2;\n      s3 = t3;\n    }\n\n    // Shift rows, sub bytes, add round key\n    const t0 = (\n      (SBOX[s0 >>> 24] << 24)\n        | (SBOX[(s1 >>> 16) & 0xff] << 16)\n        | (SBOX[(s2 >>> 8) & 0xff] << 8)\n        | SBOX[s3 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t1 = (\n      (SBOX[s1 >>> 24] << 24)\n        | (SBOX[(s2 >>> 16) & 0xff] << 16)\n        | (SBOX[(s3 >>> 8) & 0xff] << 8)\n        | SBOX[s0 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t2 = (\n      (SBOX[s2 >>> 24] << 24)\n        | (SBOX[(s3 >>> 16) & 0xff] << 16)\n        | (SBOX[(s0 >>> 8) & 0xff] << 8)\n        | SBOX[s1 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n    const t3 = (\n      (SBOX[s3 >>> 24] << 24)\n        | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]\n    ) ^ keySchedule[ksRow];\n    ksRow += 1;\n\n    // Set output\n    _M[offset] = t0;\n    _M[offset + 1] = t1;\n    _M[offset + 2] = t2;\n    _M[offset + 3] = t3;\n  }\n}\nAESAlgo.keySize = 256 / 32;\n\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n */\nexport const AES = BlockCipher._createHelper(AESAlgo);\n"],
  "mappings": "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",
  "names": ["t0", "t1", "t2", "t3"]
}
